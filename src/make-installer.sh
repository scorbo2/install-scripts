#/bin/bash

# TODO TODO TODO
# This code is old and will not work with the new structure.
# Basically needs a rewrite.
# I'm just copying it here for use as a reference / starting point.
# TODO TODO TODO


# This script will set up an application with an
# installation script, launcher script, and uninstall
# script. This saves manual copying and faffing about
# with editing properties once the files are in place.
# Can be run again for the same app to update the
# launcher/installer/uninstaller if needed.
#
# scorbett 2022-05-05

# Find where we were launched from and make sure
# that our template files exist there:
BASEDIR=`realpath $0`
BASEDIR=`dirname $BASEDIR`
TEMPLATE_DIR="${BASEDIR}/templates"
if [ ! -d ${TEMPLATE_DIR} -o ! -f ${TEMPLATE_DIR}/template-install.sh -o ! -f ${TEMPLATE_DIR}/template-launcher.sh -o ! -f ${TEMPLATE_DIR}/template-uninstall.sh ] ; then
  echo "Unable to locate template files in ${BASEDIR}. Make sure install-scripts is set up properly."
  exit 1
fi

# Make sure we have installer props set up:
# The project root directory should contain installer.props)
if [ ! -f installer.props ]; then
  echo "make-installer: no installer.props found in this directory."
  exit 1
fi
source ./installer.props

# Check to make sure we got what we need:
if [ "$JAR" == "" ]; then
  echo "No jar file specified. Check installer.props"
  exit 1
fi
if [ "$FORMAT" != "tarball" ]; then
  echo "Currently, only tarball format is supported."
  exit 1
fi
if [ "$APPLICATION" == "" -o "$VERSION" == "" ]; then
  echo "Both APPLICATION and VERSION must be specified in installer.props"
  exit 1
fi

# Now we can begin assembling the installer package:
TMPDIR=`mktemp -d`
WORKINGDIR=${TMPDIR}/${APPLICATION}-${VERSION}
mkdir $WORKINGDIR
cp $JAR ${WORKINGDIR}/${APPLICATION}.jar
for file in ${TO_COPY} ; do
  if [ -d $file ]; then
    cp -r $file $WORKINGDIR
  else
    cp $file $WORKINGDIR
  fi
done
echo $VERSION > ${WORKINGDIR}/.version
mkdir -p ${WORKINGDIR}/bin

# Generate our launcher script and install/uninstall scripts:
cat ${TEMPLATE_DIR}/template-install.sh | sed s/ApplicationGoesHere/${APPLICATION}/g | sed s/VersionGoesHere/${VERSION}/g > ${WORKINGDIR}/install.sh
cat ${TEMPLATE_DIR}/template-launcher.sh | sed s/ApplicationGoesHere/${APPLICATION}/g | sed s/JavaMemGoesHere/${JAVA_MEM}/g > ${WORKINGDIR}/bin/${APPLICATION}
cat ${TEMPLATE_DIR}/template-uninstall.sh | sed s/ApplicationGoesHere/${APPLICATION}/g > ${WORKINGDIR}/bin/uninstall.sh
chmod 744 ${WORKINGDIR}/install.sh
chmod 744 ${WORKINGDIR}/bin/${APPLICATION}
chmod 744 ${WORKINGDIR}/bin/uninstall.sh

# Optionally throw a README in there:
if [ ${PROJECT_URL} != "" -a ! -f ${WORKINGDIR}/README.txt ]; then
  echo "This is the installer tarball for ${APPLICATION}-${VERSION}" > ${WORKINGDIR}/README.txt
  echo "Project URL: ${PROJECT_URL}" >> ${WORKINGDIR}/README.txt
  echo "" >> ${WORKINGDIR}/README.txt
  echo "This tarball was generated by make-installer." >> ${WORKINGDIR}/README.txt
fi

# Build the actual tarball:
PREVWD=`pwd`
cd $TMPDIR
tar czf ${APPLICATION}-${VERSION}.tar.gz ${APPLICATION}-${VERSION}
mv *.tar.gz $PREVWD
cd $PREVWD
rm -rf ${TMPDIR}

echo "Generated installer tarball: ${APPLICATION}-${VERSION}.tar.gz"

