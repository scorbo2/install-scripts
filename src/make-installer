#/bin/bash

# Generates a linux installer package for a Java application.
# Options for this script are taken from a file named
# "installer.props" in the current directory. If not
# found, the script will take no action.
#
# ASSUMPTIONS:
#  1) installer.props exists in the current directory
#  2) your application has a single executable jar file
#  3) You are okay with that jar file being named after the app
#
# Possible options in installer.props:
#  FORMAT -> currently we only support "tarball" as an option here.
#            That will generate a .tar.gz containing everything
#            needed for an install. Future options may
#            include "RPM" and "DEB".
#  APPLICATION -> The name of your application. This will
#            also be used as the name of your launcher script.
#            It is advisable not to use spaces or other characters
#            that shouldn't be in a filename.
#  VERSION -> The major.minor version of your app.
#            By convention we don't use major.minor.patch here.
#  PROJECT_URL -> an optional URL for your project home.
#  JAVAMEM -> Any extra java memory options you want the launcher
#            to use when starting your application.
#            Example: "-Xms1g -Xmx2g"
#            An empty string is also fine here.
#  JAR -> The location of your executable jar.
#         This path should be relative to the current dir.
#  TO_COPY -> An optional space-separated list of extra files
#         or directories to include in the install. Each path
#         listed here should be relative to the current dir.
#         It is advisable to include a logo.png if you want
#         a desktop shortcut to be generated for your app.
#
# Note: an INSTALL.txt informational file will be included in
# the generated tarball if you specify a PROJECT_URL. This file
# will however not be installed when the installer is run. It's
# just to provide casual passers-by with some info about what
# the tarball is for.
#
# SAMPLE USAGE
#  Literally just cd into your project root directory and run:
#    make-installer
#  The tarball will be output to the current directory.
#  You should commit installer.props to your git repo.
#
#
# Yes, I know you can do all this with maven plugins.
# This script is very old and I maintain it just for 
# backwards compatibility and also out of habit at this point :)
#


# Find where we were launched from and make sure
# that our template files exist there:
BASEDIR=`realpath $0`
BASEDIR=`dirname $BASEDIR`
TEMPLATE_DIR="${BASEDIR}/templates"
if [ ! -d ${TEMPLATE_DIR} -o ! -f ${TEMPLATE_DIR}/template-install.sh -o ! -f ${TEMPLATE_DIR}/template-launcher.sh -o ! -f ${TEMPLATE_DIR}/template-uninstall.sh ] ; then
  echo "Unable to locate template files in ${BASEDIR}. Make sure install-scripts is set up properly."
  exit 1
fi

# Make sure we have installer props set up:
# The project root directory should contain installer.props)
if [ ! -f installer.props ]; then
  echo "make-installer: no installer.props found in this directory."
  exit 1
fi
source ./installer.props

# Check to make sure we got what we need:
if [ "$JAR" == "" ]; then
  echo "No jar file specified. Check installer.props"
  exit 1
fi
if [ "$FORMAT" != "tarball" ]; then
  echo "Currently, only tarball format is supported."
  exit 1
fi
if [ "$APPLICATION" == "" -o "$VERSION" == "" ]; then
  echo "Both APPLICATION and VERSION must be specified in installer.props"
  exit 1
fi

# Now we can begin assembling the installer package:
TMPDIR=`mktemp -d`
WORKINGDIR=${TMPDIR}/${APPLICATION}-${VERSION}
mkdir $WORKINGDIR
cp $JAR ${WORKINGDIR}/${APPLICATION}.jar
for file in ${TO_COPY} ; do
  if [ -d $file ]; then
    cp -r $file $WORKINGDIR
  else
    cp $file $WORKINGDIR
  fi
done
mkdir -p ${WORKINGDIR}/bin

# Generate our launcher script and install/uninstall scripts:
cat ${TEMPLATE_DIR}/template-install.sh | sed s/ApplicationGoesHere/${APPLICATION}/g | sed s/VersionGoesHere/${VERSION}/g > ${WORKINGDIR}/install.sh
cat ${TEMPLATE_DIR}/template-launcher.sh | sed s/ApplicationGoesHere/${APPLICATION}/g | sed s/JavaMemGoesHere/${JAVA_MEM}/g > ${WORKINGDIR}/bin/${APPLICATION}
cat ${TEMPLATE_DIR}/template-uninstall.sh | sed s/ApplicationGoesHere/${APPLICATION}/g > ${WORKINGDIR}/bin/uninstall.sh
chmod 755 ${WORKINGDIR}/install.sh
chmod 755 ${WORKINGDIR}/bin/${APPLICATION}
chmod 755 ${WORKINGDIR}/bin/uninstall.sh

# Optionally throw in an INSTALL.txt with project information:
if [ ${PROJECT_URL} != "" -a ! -f ${WORKINGDIR}/INSTALL.txt ]; then
  echo "This is the installer tarball for ${APPLICATION}-${VERSION}" > ${WORKINGDIR}/INSTALL.txt
  echo "Project URL: ${PROJECT_URL}" >> ${WORKINGDIR}/INSTALL.txt
  echo "" >> ${WORKINGDIR}/INSTALL.txt
  echo "Run the install.sh script to install ${APPLICATION}-${VERSION}" >> ${WORKINGDIR}/INSTALL.txt
  echo "" >> ${WORKINGDIR}/INSTALL.txt
  echo "This tarball was generated by make-installer." >> ${WORKINGDIR}/INSTALL.txt
fi

# Build the actual tarball:
PREVWD=`pwd`
cd $TMPDIR
tar czf ${APPLICATION}-${VERSION}.tar.gz ${APPLICATION}-${VERSION}
mv *.tar.gz $PREVWD
cd $PREVWD
rm -rf ${TMPDIR}

echo "Generated installer tarball: ${APPLICATION}-${VERSION}.tar.gz"

